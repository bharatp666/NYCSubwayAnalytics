name: Create GCP Bronze Resources

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    paths:
      - 'bronze_layer/main.py'              
      - 'bronze_layer/functions.py'         
      - 'bronze_layer/requirements_ingest.txt'  
      - 'bronze_layer/Dockerfile'

jobs:
  create-resources:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create JSON credentials file
      uses: jsdaniell/create-json@v1.2.3
      with:
        name: "gcloud-service-key.json"
        json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        export_default_credentials: true

    - name: Authenticate to Google Cloud
      run: gcloud auth activate-service-account --key-file=gcloud-service-key.json

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Load config.json into environment
      run: |
        for key in artifact_repo description image_name job_name memory cpu task_timeout; do
          value=$(jq -r ".bronze_layer.$key" config.json)
          echo "$key=$value" >> $GITHUB_ENV
        done
    
    - name: Debug Environment Variables
      run: |
        echo "artifact_repo=${{ env.artifact_repo }}"
        echo "description=${{ env.description }}"
        echo "image_name=${{ env.image_name }}"
        echo "job_name=${{ env.job_name }}"
        echo "memory=${{ env.memory }}"
        echo "cpu=${{ env.cpu }}"
        echo "task_timeout=${{ env.task_timeout }}"
    


    - name: Check if Artifact Registry Repo Exists
      id: check-repo
      run: |
        if gcloud artifacts repositories describe ${{ env.artifact_repo }} --location=${{ secrets.GCP_REGION }}; then
          echo "repo_exists=true" >> $GITHUB_ENV
        else
          echo "repo_exists=false" >> $GITHUB_ENV
        fi

    - name: Create Artifact Registry Repo (if needed)
      if: env.repo_exists == 'false'
      run: |
        gcloud artifacts repositories create ${{ env.artifact_repo }} \
          --repository-format=docker \
          --location=${{ secrets.GCP_REGION }} \
          --description="${{ env.description }}"

    - name: Build and Push Docker Image
      run: |
        IMAGE="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.artifact_repo }}/${{ env.image_name }}:latest"
        docker build -t $IMAGE -f bronze_layer/Dockerfile bronze_layer
        gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
        docker push $IMAGE

    - name: Load ingest_run_config.json and build env var string
      id: parse_runtime_config
      run: |
        BUCKET=$(jq -r '.BUCKET_NAME' ingest_run_config.json)
        FOLDER=$(jq -r '.FOLDER_NAME' ingest_run_config.json)
        N_JOBS=$(jq -r '.N_JOBS' ingest_run_config.json)
        META_BUCKET=$(jq -r '.META_BUCKET' ingest_run_config.json)
        META_FOLDER=$(jq -r '.META_FOLDER' ingest_run_config.json)

        ENV_VARS="BUCKET_NAME=$BUCKET,FOLDER_NAME=$FOLDER,N_JOBS=$N_JOBS,META_BUCKET=$META_BUCKET,META_FOLDER=$META_FOLDER"
        echo "env_vars=$ENV_VARS" >> $GITHUB_OUTPUT

    - name: Create or Update Cloud Run Job
      run: |
        JOB_NAME="${{ env.job_name }}"
        REGION="${{ secrets.GCP_REGION }}"
        IMAGE="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.artifact_repo }}/${{ env.image_name }}:latest"
        ENV_VARS="${{ steps.parse_runtime_config.outputs.env_vars }}"

        if gcloud run jobs describe $JOB_NAME --region $REGION > /dev/null 2>&1; then
          echo "Updating Cloud Run Job: $JOB_NAME"
          gcloud run jobs update $JOB_NAME \
            --image $IMAGE \
            --region $REGION \
            --memory ${{ env.memory }} \
            --cpu ${{ env.cpu }} \
            --task-timeout ${{ env.task_timeout }} \
            --tasks=4 \
            --parallelism=4 \
            --set-env-vars "$ENV_VARS"
        else
          echo "Creating Cloud Run Job: $JOB_NAME"
          gcloud run jobs create $JOB_NAME \
            --image $IMAGE \
            --region $REGION \
            --memory ${{ env.memory }} \
            --cpu ${{ env.cpu }} \
            --task-timeout ${{ env.task_timeout }} \
            --tasks=4 \
            --parallelism=4 \
            --set-env-vars "$ENV_VARS"
        fi
